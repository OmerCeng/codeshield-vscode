import * as vscode from 'vscode';
import { SecurityVulnerability } from '../types/vulnerability';

export class VulnerabilityExplainer {
    
    static explainVulnerability(vulnerability: SecurityVulnerability) {
        const explanations = {
            'sql-injection': {
                title: 'SQL Injection Security Vulnerability',
                description: `SQL Injection is a security vulnerability that occurs when user inputs are unsafely included in SQL queries.`,
                risks: [
                    'Reading all data from the database',
                    'Deleting or modifying data',
                    'Gaining system administrator privileges',
                    'Stealing sensitive information'
                ],
                solutions: [
                    'Use parameterized queries (prepared statements)',
                    'Use ORM tools',
                    'Implement input validation',
                    'Use stored procedures'
                ],
                examples: `
**Unsafe code:**
\`\`\`sql
"SELECT * FROM users WHERE id = " + userId
\`\`\`

**Safe code:**
\`\`\`sql
"SELECT * FROM users WHERE id = ?"
\`\`\`
                `
            },
            'api-key': {
                title: 'API Key Security Risk',
                description: `Exposing API keys in source code can lead to unauthorized access and security breaches.`,
                risks: [
                    'Unauthorized API usage',
                    'Financial loss on paid services',
                    'Account takeover',
                    'Data breach'
                ],
                solutions: [
                    'Use environment variables',
                    'Use secure key management services',
                    'Implement API key rotation',
                    'Limit scope and permissions'
                ],
                examples: `
**Unsafe code:**
\`\`\`javascript
const apiKey = "sk-1234567890abcdef";
\`\`\`

**Safe code:**
\`\`\`javascript
const apiKey = process.env.OPENAI_API_KEY;
\`\`\``
            },
            'hardcoded-secret': {
                title: 'Hardcoded Secret Information',
                description: `Defining passwords and secret information as constants in source code creates security risks.`,
                risks: [
                    'Account takeover',
                    'Unauthorized system access',
                    'Data security breach',
                    'Compliance issues'
                ],
                solutions: [
                    'Use environment variables',
                    'Use configuration files',
                    'Use secure credential store',
                    'Use key vault services'
                ],
                examples: `
**Unsafe code:**
\`\`\`javascript
const password = "mySecretPassword123";
\`\`\`

**Safe code:**
\`\`\`javascript
const password = process.env.DATABASE_PASSWORD;
\`\`\``
            },
            'unsafe-eval': {
                title: 'Unsafe Code Execution',
                description: `eval() and similar dynamic code execution methods lead to code injection risks.`,
                risks: [
                    'Code injection attacks',
                    'XSS (Cross-site scripting)',
                    'Unauthorized code execution',
                    'System security breach'
                ],
                solutions: [
                    'Use JSON.parse()',
                    'Use predefined functions',
                    'Implement sandboxing',
                    'Perform input validation'
                ],
                examples: `
**Unsafe code:**
\`\`\`javascript
eval(userInput);
\`\`\`

**Safe code:**
\`\`\`javascript
JSON.parse(userInput);
\`\`\``
            },
            'path-traversal': {
                title: 'Path Traversal Security Vulnerability',
                description: `Path Traversal allows attackers to access files and directories outside the intended directory through directory traversal sequences.`,
                risks: [
                    'Unauthorized file system access',
                    'Reading sensitive configuration files',
                    'Access to system files',
                    'Potential code execution'
                ],
                solutions: [
                    'Validate and sanitize file paths',
                    'Use whitelisted directories',
                    'Implement proper path resolution',
                    'Use chroot or sandbox environments'
                ],
                examples: `
**Unsafe code:**
\`\`\`javascript
fs.readFile("/uploads/" + userFileName);
\`\`\`

**Safe code:**
\`\`\`javascript
fs.readFile(path.resolve(safeDir, sanitizedFileName));
\`\`\``
            },
            'xss': {
                title: 'Cross-Site Scripting (XSS) Vulnerability',
                description: `XSS allows attackers to inject malicious scripts into web pages viewed by other users.`,
                risks: [
                    'Session hijacking',
                    'Cookie theft',
                    'Phishing attacks',
                    'Malware distribution'
                ],
                solutions: [
                    'Sanitize and escape user input',
                    'Use Content Security Policy',
                    'Validate input on server side',
                    'Use secure templating engines'
                ],
                examples: `
**Unsafe code:**
\`\`\`javascript
element.innerHTML = userInput;
\`\`\`

**Safe code:**
\`\`\`javascript
element.textContent = userInput;
\`\`\``
            },
            'ssrf': {
                title: 'Server-Side Request Forgery (SSRF) Vulnerability',
                description: `SSRF allows attackers to make requests from the server to internal or external systems.`,
                risks: [
                    'Internal network scanning',
                    'Access to internal services',
                    'Cloud metadata access',
                    'Bypassing firewall restrictions'
                ],
                solutions: [
                    'Validate and whitelist URLs',
                    'Use network segmentation',
                    'Implement request timeouts',
                    'Block internal IP ranges'
                ],
                examples: `
**Unsafe code:**
\`\`\`javascript
fetch(req.body.url);
\`\`\`

**Safe code:**
\`\`\`javascript
fetch(validateURL(req.body.url));
\`\`\``
            },
            'nosql-injection': {
                title: 'NoSQL Injection Vulnerability',
                description: `NoSQL Injection exploits NoSQL databases through malicious query manipulation.`,
                risks: [
                    'Unauthorized data access',
                    'Data manipulation',
                    'Authentication bypass',
                    'Denial of service'
                ],
                solutions: [
                    'Use parameterized queries',
                    'Validate input types',
                    'Avoid $where operators',
                    'Implement proper access controls'
                ],
                examples: `
**Unsafe code:**
\`\`\`javascript
db.users.find({username: req.body.username});
\`\`\`

**Safe code:**
\`\`\`javascript
db.users.find({username: sanitize(req.body.username)});
\`\`\``
            },
            'prototype-pollution': {
                title: 'Prototype Pollution Vulnerability',
                description: `Prototype Pollution allows modification of JavaScript object prototypes, leading to property injection.`,
                risks: [
                    'Property injection attacks',
                    'Application logic bypass',
                    'Denial of service',
                    'Remote code execution'
                ],
                solutions: [
                    'Use Object.create(null)',
                    'Validate object keys',
                    'Use safe merge libraries',
                    'Implement key blacklists'
                ],
                examples: `
**Unsafe code:**
\`\`\`javascript
Object.assign({}, userInput);
\`\`\`

**Safe code:**
\`\`\`javascript
Object.assign(Object.create(null), sanitizedInput);
\`\`\``
            },
            'redos': {
                title: 'Regular Expression Denial of Service (ReDoS)',
                description: `ReDoS exploits inefficient regular expressions to cause catastrophic backtracking and CPU exhaustion.`,
                risks: [
                    'Application slowdown',
                    'CPU exhaustion',
                    'Denial of service',
                    'Resource consumption'
                ],
                solutions: [
                    'Avoid nested quantifiers',
                    'Use atomic groups',
                    'Implement regex timeouts',
                    'Test regex performance'
                ],
                examples: `
**Unsafe code:**
\`\`\`javascript
/(a+)+/.test(userInput);
\`\`\`

**Safe code:**
\`\`\`javascript
/a+/.test(userInput);
\`\`\``
            },
            'template-injection': {
                title: 'Template Injection Vulnerability',
                description: `Template Injection allows attackers to inject malicious code into template engines.`,
                risks: [
                    'Remote code execution',
                    'Server-side code injection',
                    'Information disclosure',
                    'File system access'
                ],
                solutions: [
                    'Use predefined templates only',
                    'Sanitize template variables',
                    'Implement template sandboxing',
                    'Validate user input strictly'
                ],
                examples: `
**Unsafe code:**
\`\`\`python
Template(user_template).render(data)
\`\`\`

**Safe code:**
\`\`\`python
predefined_templates[template_name].render(data)
\`\`\``
            },
            'deserialization': {
                title: 'Insecure Deserialization Vulnerability',
                description: `Insecure deserialization can lead to remote code execution and other attacks.`,
                risks: [
                    'Remote code execution',
                    'Denial of service',
                    'Authentication bypass',
                    'Arbitrary file access'
                ],
                solutions: [
                    'Use safe serialization formats (JSON)',
                    'Validate serialized data',
                    'Implement object type restrictions',
                    'Use digital signatures for serialized data'
                ],
                examples: `
**Unsafe code:**
\`\`\`python
pickle.loads(user_data)
\`\`\`

**Safe code:**
\`\`\`python
json.loads(user_data)
\`\`\``
            },
            'java-vulnerability': {
                title: 'Java Security Vulnerability',
                description: `Java-specific security vulnerability detected in the code.`,
                risks: [
                    'Code injection attacks',
                    'Data breach',
                    'Unauthorized access',
                    'System compromise'
                ],
                solutions: [
                    'Use parameterized queries',
                    'Validate all inputs',
                    'Apply secure coding practices',
                    'Use security frameworks'
                ]
            },            // TODO: Consider using an ORM like Sequelize, TypeORM, or SQLAlchemy
            'csharp-vulnerability': {
                title: 'C# Security Vulnerability',
                description: `C#-specific security vulnerability detected in the code.`,
                risks: [
                    'Code injection attacks',
                    'Data breach',
                    'Privilege escalation',
                    'System compromise'
                ],
                solutions: [
                    'Use parameterized queries',
                    'Sanitize inputs',
                    'Apply security best practices',
                    'Use security libraries'
                ]
            },
            'cpp-vulnerability': {
                title: 'C++ Security Vulnerability',
                description: `C++-specific security vulnerability detected in the code.`,
                risks: [
                    'Buffer overflow attacks',
                    'Memory corruption',
                    'Code execution',
                    'System compromise'
                ],
                solutions: [
                    'Use safe string functions',
                    'Apply bounds checking',
                    'Use RAII patterns',
                    'Validate all inputs'
                ]
            },
            'php-vulnerability': {
                title: 'PHP Security Vulnerability',
                description: `PHP-specific security vulnerability detected in the code.`,
                risks: [
                    'Code injection attacks',
                    'File inclusion attacks',
                    'Data breach',
                    'System compromise'
                ],
                solutions: [
                    'Use prepared statements',
                    'Sanitize outputs',
                    'Validate file paths',
                    'Apply security headers'
                ]
            },
            'go-vulnerability': {
                title: 'Go Security Vulnerability',
                description: `Go-specific security vulnerability detected in the code.`,
                risks: [
                    'Command injection attacks',
                    'SQL injection vulnerabilities', 
                    'Path traversal attacks',
                    'Data exposure'
                ],
                solutions: [
                    'Use prepared statements for SQL',
                    'Validate and sanitize inputs',
                    'Use filepath.Clean() for paths',
                    'Follow Go security best practices'
                ]
            },
            'command-injection': {
                title: 'Command Injection Vulnerability',
                description: `Command injection allows attackers to execute arbitrary system commands.`,
                risks: [
                    'Remote code execution',
                    'System takeover',
                    'Data theft',
                    'Service disruption'
                ],
                solutions: [
                    'Use parameterized commands',
                    'Validate and sanitize inputs',
                    'Use safe APIs',
                    'Apply principle of least privilege'
                ]
            },
            'file-inclusion': {
                title: 'File Inclusion Vulnerability',
                description: `File inclusion allows attackers to include malicious files in the application.`,
                risks: [
                    'Remote code execution',
                    'Information disclosure',
                    'System compromise',
                    'Privilege escalation'
                ],
                solutions: [
                    'Use whitelist validation',
                    'Avoid dynamic includes',
                    'Sanitize file paths',
                    'Apply proper access controls'
                ]
            },
            'buffer-overflow': {
                title: 'Buffer Overflow Vulnerability',
                description: `Buffer overflow occurs when data exceeds buffer boundaries, potentially corrupting memory.`,
                risks: [
                    'Code execution',
                    'System crash',
                    'Memory corruption',
                    'Privilege escalation'
                ],
                solutions: [
                    'Use safe string functions',
                    'Apply bounds checking',
                    'Use memory-safe languages',
                    'Enable stack protection'
                ]
            },
            'format-string': {
                title: 'Format String Vulnerability',
                description: `Format string vulnerabilities allow attackers to read/write arbitrary memory locations.`,
                risks: [
                    'Information disclosure',
                    'Code execution',
                    'Memory corruption',
                    'System compromise'
                ],
                solutions: [
                    'Always use format specifiers',
                    'Validate format strings',
                    'Use safe printing functions',
                    'Apply static analysis'
                ]
            },
            'memory-vulnerability': {
                title: 'Memory Management Vulnerability',
                description: `Memory management vulnerabilities can lead to crashes and security issues.`,
                risks: [
                    'Memory leaks',
                    'Use-after-free attacks',
                    'Double-free vulnerabilities',
                    'System instability'
                ],
                solutions: [
                    'Use smart pointers',
                    'Apply RAII patterns',
                    'Use memory-safe alternatives',
                    'Implement proper cleanup'
                ]
            },
            'unsafe-deserialization': {
                title: 'Unsafe Deserialization Vulnerability',
                description: `Unsafe deserialization can lead to remote code execution and other security issues.`,
                risks: [
                    'Remote code execution',
                    'Denial of service',
                    'Authentication bypass',
                    'Data corruption'
                ],
                solutions: [
                    'Use safe serialization formats',
                    'Validate object types',
                    'Implement integrity checks',
                    'Use allowlists for classes'
                ]
            }
        };

        const explanation = explanations[vulnerability.type];
        if (!explanation) {
            return;
        }

        const panel = vscode.window.createWebviewPanel(
            'vulnerabilityExplanation',
            `CodeShield: ${explanation.title}`,
            vscode.ViewColumn.Beside,
            {
                enableScripts: true
            }
        );

        panel.webview.html = this.getWebviewContent(explanation, vulnerability);
    }

    private static getWebviewContent(explanation: any, vulnerability: SecurityVulnerability): string {
        return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${explanation.title}</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: var(--vscode-foreground);
            background-color: var(--vscode-editor-background);
            padding: 20px;
            max-width: 800px;
            margin: 0 auto;
        }
        h1 {
            color: var(--vscode-errorForeground);
            border-bottom: 2px solid var(--vscode-errorForeground);
            padding-bottom: 10px;
        }
        h2 {
            color: var(--vscode-textLink-foreground);
            margin-top: 30px;
        }
        .vulnerability-info {
            background: var(--vscode-editor-inactiveSelectionBackground);
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }
        .risk-item, .solution-item {
            margin: 10px 0;
            padding-left: 20px;
        }
        .risk-item::before {
            content: "⚠️";
            margin-right: 10px;
        }
        .solution-item::before {
            content: "✅";
            margin-right: 10px;
        }
        pre {
            background: var(--vscode-textBlockQuote-background);
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
        }
        code {
            background: var(--vscode-textBlockQuote-background);
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Courier New', monospace;
        }
        .detected-code {
            background: var(--vscode-inputValidation-errorBackground);
            border-left: 4px solid var(--vscode-errorForeground);
            padding: 10px;
            margin: 15px 0;
        }
    </style>
</head>
<body>
    <h1>🛡️ ${explanation.title}</h1>
    
    <div class="vulnerability-info">
        <h2>📝 Description</h2>
        <p>${explanation.description}</p>
        
        <h2>⚠️ Potential Risks</h2>
        ${explanation.risks.map((risk: string) => `<div class="risk-item">${risk}</div>`).join('')}
        
        <h2>✅ Solution Recommendations</h2>
        ${explanation.solutions.map((solution: string) => `<div class="solution-item">${solution}</div>`).join('')}
    </div>

    <div class="detected-code">
        <h3>🔍 Detected Code</h3>
        <p><strong>Line ${vulnerability.line}:</strong></p>
        <code>${vulnerability.code}</code>
        <p><strong>Suggestion:</strong> ${vulnerability.suggestion}</p>
    </div>

    <hr style="margin: 40px 0; border: 1px solid var(--vscode-widget-border);">
    
    <p style="text-align: center; color: var(--vscode-descriptionForeground);">
        <strong>CodeShield</strong> - Keep your code secure 🛡️
    </p>
</body>
</html>`;
    }
}